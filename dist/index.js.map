{"version":3,"file":"index.js","sources":["../index.ts"],"sourcesContent":["type Options = {\r\n  openDelimiter: string;\r\n  closeDelimiter: string;\r\n  plugins?: {\r\n    name: string;\r\n    delimiter: string;\r\n    fn: (content: string) => string;\r\n  }[];\r\n};\r\n\r\nconst defaultOptions: Options = {\r\n  openDelimiter: \"{{\",\r\n  closeDelimiter: \"}}\",\r\n};\r\n\r\nconst defaultPlugins: Options[\"plugins\"] = [\r\n  {\r\n    name: \"return\",\r\n    delimiter: \"=\",\r\n    fn: function (content) {\r\n      return \"return \" + content;\r\n    },\r\n  },\r\n  {\r\n    name: \"comment\",\r\n    delimiter: \"#\",\r\n    fn: function (content) {\r\n      return \"/*\" + content + \"*/\";\r\n    },\r\n  },\r\n];\r\n\r\nfunction tempjs(\r\n  template: string,\r\n  data: Record<string, unknown>,\r\n  opts: Options = defaultOptions\r\n): string {\r\n  //custom plugin to add fatest return\r\n  opts.plugins = (opts.plugins ?? []).concat(defaultPlugins);\r\n\r\n  const delimiterRegex = new RegExp(\r\n    opts.openDelimiter + \"([\\\\s\\\\S]*?)\" + opts.closeDelimiter,\r\n    \"gi\"\r\n  );\r\n\r\n  const result: string[] = [];\r\n\r\n  const templateText = template.split(\r\n    new RegExp(opts.openDelimiter + \"[\\\\s\\\\S]*?\" + opts.closeDelimiter, \"gi\")\r\n  );\r\n\r\n  let match: RegExpExecArray;\r\n  while ((match = delimiterRegex.exec(template)) !== null) {\r\n    const jsInstruction = match[1];\r\n    const text = JSON.stringify(templateText.shift());\r\n\r\n    let finalJsInstruction = jsInstruction;\r\n\r\n    const customPlugin = opts.plugins.find((plugin) =>\r\n      jsInstruction.startsWith(plugin.delimiter)\r\n    );\r\n\r\n    if (customPlugin) {\r\n      finalJsInstruction = customPlugin.fn(\r\n        jsInstruction.replace(customPlugin.delimiter, \"\")\r\n      );\r\n    }\r\n\r\n    result.push(\r\n      (text ? text + \"+\" : \"\") + `((function(){ ${finalJsInstruction} })()??\"\")`\r\n    );\r\n  }\r\n\r\n  const code =\r\n    \"return \" +\r\n    result.join(\" + \") +\r\n    (templateText.length > 0 ? \"+\" + JSON.stringify(templateText.shift()) : \"\");\r\n  return new Function(...Object.keys(data), code).apply(\r\n    null,\r\n    Object.values(data)\r\n  );\r\n}\r\n\r\nexport default tempjs;\r\n"],"names":["defaultOptions","openDelimiter","closeDelimiter","defaultPlugins","name","delimiter","fn","content","template","data","opts","plugins","_a","concat","delimiterRegex","RegExp","result","templateText","split","match","exec","jsInstruction","text","JSON","stringify","shift","finalJsInstruction","customPlugin","find","plugin","startsWith","replace","push","code","join","length","Function","Object","keys","apply","values"],"mappings":"uOAUA,MAAMA,EAA0B,CAC9BC,cAAe,KACfC,eAAgB,MAGZC,EAAqC,CACzC,CACEC,KAAM,SACNC,UAAW,IACXC,GAAI,SAAUC,GACZ,MAAO,UAAYA,CACpB,GAEH,CACEH,KAAM,UACNC,UAAW,IACXC,GAAI,SAAUC,GACZ,MAAO,KAAOA,EAAU,IACzB,WAIL,SACEC,EACAC,EACAC,EAAgBV,SAGhBU,EAAKC,SAA2B,QAAhBC,EAAAF,EAAKC,eAAW,IAAAC,EAAAA,EAAA,IAAIC,OAAOV,GAE3C,MAAMW,EAAiB,IAAIC,OACzBL,EAAKT,cAAgB,eAAiBS,EAAKR,eAC3C,MAGIc,EAAmB,GAEnBC,EAAeT,EAASU,MAC5B,IAAIH,OAAOL,EAAKT,cAAgB,aAAeS,EAAKR,eAAgB,OAGtE,IAAIiB,EACJ,KAAmD,QAA3CA,EAAQL,EAAeM,KAAKZ,KAAqB,CACvD,MAAMa,EAAgBF,EAAM,GACtBG,EAAOC,KAAKC,UAAUP,EAAaQ,SAEzC,IAAIC,EAAqBL,EAEzB,MAAMM,EAAejB,EAAKC,QAAQiB,MAAMC,GACtCR,EAAcS,WAAWD,EAAOxB,aAG9BsB,IACFD,EAAqBC,EAAarB,GAChCe,EAAcU,QAAQJ,EAAatB,UAAW,MAIlDW,EAAOgB,MACJV,EAAOA,EAAO,IAAM,IAAM,iBAAiBI,cAE/C,CAED,MAAMO,EACJ,UACAjB,EAAOkB,KAAK,QACXjB,EAAakB,OAAS,EAAI,IAAMZ,KAAKC,UAAUP,EAAaQ,SAAW,IAC1E,OAAO,IAAIW,YAAYC,OAAOC,KAAK7B,GAAOwB,GAAMM,MAC9C,KACAF,OAAOG,OAAO/B,GAElB"}