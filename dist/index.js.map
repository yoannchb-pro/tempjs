{"version":3,"file":"index.js","sources":["../src/config/defaultOptions.ts","../src/config/defaultDelimiters.ts","../src/core/compileFromFile.ts","../src/config/defaultPlugins.ts","../src/core/compile.ts","../src/index.ts"],"sourcesContent":["import Options from \"../types/options\";\r\n\r\nconst defaultOptions: Options = {\r\n  openDelimiter: \"{%\",\r\n  closeDelimiter: \"%}\",\r\n};\r\n\r\nexport default defaultOptions;\r\n","import Options from \"../types/options\";\r\n\r\nconst defaultDelimiters: Options[\"delimiters\"] = [\r\n  {\r\n    name: \"return\",\r\n    description: \"Allow user to add variable to the output\",\r\n    delimiter: \"=\",\r\n    fn: function (content) {\r\n      return \"$__output += \" + content;\r\n    },\r\n  },\r\n  {\r\n    name: \"comment\",\r\n    description: \"Shortcut to turn some code into a comment\",\r\n    delimiter: \"#\",\r\n    fn: function (content) {\r\n      return \"/*\" + content + \"*/\";\r\n    },\r\n  },\r\n];\r\n\r\nexport default defaultDelimiters;\r\n","import Options from \"../types/options\";\r\nimport compile from \"./compile\";\r\n\r\nconst isNode = typeof window === \"undefined\";\r\nconst fs = isNode && require(\"fs\");\r\nconst path = isNode && require(\"path\");\r\n\r\nlet defaultDirPath: string = \"\";\r\n\r\n/**\r\n * Compile from a file content\r\n * @param file file path\r\n * @param data data used in the file\r\n * @param opts compile options\r\n * @returns\r\n */\r\nfunction compileFromFile(\r\n  file: string,\r\n  data: Record<string, unknown> = {},\r\n  opts: Options = {}\r\n) {\r\n  if (!isNode)\r\n    throw new Error(\"Including file is only available in nodejs environement\");\r\n\r\n  const template = fs.readFileSync(path.resolve(defaultDirPath, file), \"utf-8\");\r\n\r\n  if (!defaultDirPath) defaultDirPath = path.dirname(file);\r\n\r\n  return compile(template, data, opts);\r\n}\r\n\r\nexport default compileFromFile;\r\n","import Options from \"../types/options\";\r\nimport compileFromFile from \"../core/compileFromFile\";\r\n\r\nconst defaultPlugins: Options[\"plugins\"] = [\r\n  {\r\n    name: \"include\",\r\n    description: \"Allow to render other file into the template\",\r\n    fn: compileFromFile,\r\n  },\r\n];\r\n\r\nexport default defaultPlugins;\r\n","import defaultOptions from \"../config/defaultOptions\";\r\nimport defaultDelimiters from \"../config/defaultDelimiters\";\r\nimport defaultPlugins from \"../config/defaultPlugins\";\r\nimport Options from \"../types/options\";\r\n\r\nconst AsyncFunction = async function () {}.constructor;\r\n\r\n/**\r\n * Compile a tempjs template\r\n * @param template the template\r\n * @param data data you need in the template\r\n * @param opts compile options\r\n * @returns\r\n */\r\nfunction compile(\r\n  template: string,\r\n  data: Record<string, unknown> = {},\r\n  opts: Options = {}\r\n): string | Promise<string> {\r\n  opts = Object.assign(defaultOptions, opts);\r\n\r\n  opts.delimiters = (opts.delimiters ?? []).concat(defaultDelimiters);\r\n  opts.plugins = (opts.plugins ?? []).concat(defaultPlugins);\r\n\r\n  const generatedCode: string[] = [\"let $__output=''\"];\r\n  const delimiterRegex = new RegExp(\r\n    `(${opts.openDelimiter}[\\\\s\\\\S]*?${opts.closeDelimiter})`,\r\n    \"gi\"\r\n  );\r\n\r\n  for (const text of template.split(delimiterRegex)) {\r\n    const isInstruction = delimiterRegex.test(text);\r\n    if (!isInstruction) {\r\n      generatedCode.push(`$__output += ${JSON.stringify(text)}`);\r\n      continue;\r\n    }\r\n\r\n    let jsInstruction = text.substring(\r\n      opts.openDelimiter.length,\r\n      text.length - opts.closeDelimiter.length\r\n    );\r\n    // .replace(/\\n/gi, \"\");\r\n\r\n    //check for custom delimiter and apply the function\r\n    const customDelimiter = opts.delimiters.find((delimiter) =>\r\n      jsInstruction.startsWith(delimiter.delimiter)\r\n    );\r\n    if (customDelimiter) {\r\n      jsInstruction = customDelimiter.fn(\r\n        jsInstruction.replace(customDelimiter.delimiter, \"\")\r\n      );\r\n    }\r\n\r\n    generatedCode.push(jsInstruction);\r\n  }\r\n\r\n  generatedCode.push(\"return $__output\");\r\n  const finalCode = generatedCode.join(\";\");\r\n\r\n  const fn = opts.async ? AsyncFunction : Function;\r\n  return fn(\r\n    ...Object.keys(data), //variables name\r\n    ...opts.plugins.map((plugin) => plugin.name), //plugins name\r\n    finalCode\r\n  ).apply(opts.context ?? null, [\r\n    ...Object.values(data), //variables value\r\n    ...opts.plugins.map((plugin) => plugin.fn), //plugins functions\r\n    finalCode,\r\n  ]);\r\n}\r\n\r\nexport default compile;\r\n","import compile from \"./core/compile\";\r\nimport compileFromFile from \"./core/compileFromFile\";\r\n\r\nexport default {\r\n  compile,\r\n  compileFromFile,\r\n};\r\n"],"names":["defaultOptions","openDelimiter","closeDelimiter","defaultDelimiters","name","description","delimiter","fn","content","isNode","window","fs","require","path","defaultDirPath","compileFromFile","file","data","opts","Error","template","readFileSync","resolve","dirname","compile","defaultPlugins","AsyncFunction","async","constructor","Object","assign","delimiters","_a","concat","plugins","_b","generatedCode","delimiterRegex","RegExp","text","split","test","push","JSON","stringify","jsInstruction","substring","length","customDelimiter","find","startsWith","replace","finalCode","join","Function","keys","map","plugin","apply","_c","context","values"],"mappings":"uOAEA,MAAMA,EAA0B,CAC9BC,cAAe,KACfC,eAAgB,MCFZC,EAA2C,CAC/C,CACEC,KAAM,SACNC,YAAa,2CACbC,UAAW,IACXC,GAAI,SAAUC,GACZ,MAAO,gBAAkBA,CAC1B,GAEH,CACEJ,KAAM,UACNC,YAAa,4CACbC,UAAW,IACXC,GAAI,SAAUC,GACZ,MAAO,KAAOA,EAAU,IACzB,ICdCC,EAA2B,oBAAXC,OAChBC,EAAKF,GAAUG,QAAQ,MACvBC,EAAOJ,GAAUG,QAAQ,QAE/B,IAAIE,EAAyB,GAS7B,SAASC,EACPC,EACAC,EAAgC,CAAA,EAChCC,EAAgB,CAAA,GAEhB,IAAKT,EACH,MAAM,IAAIU,MAAM,2DAElB,MAAMC,EAAWT,EAAGU,aAAaR,EAAKS,QAAQR,EAAgBE,GAAO,SAIrE,OAFKF,IAAgBA,EAAiBD,EAAKU,QAAQP,IAE5CQ,EAAQJ,EAAUH,EAAMC,EACjC,CC1BA,MAAMO,EAAqC,CACzC,CACErB,KAAM,UACNC,YAAa,+CACbE,GAAIQ,ICFFW,EAAgBC,iBAAoB,EAACC,YAS3C,SAASJ,EACPJ,EACAH,EAAgC,CAAA,EAChCC,EAAgB,CAAA,cAEhBA,EAAOW,OAAOC,OAAO9B,EAAgBkB,IAEhCa,YAAiC,QAAnBC,EAAAd,EAAKa,kBAAc,IAAAC,EAAAA,EAAA,IAAIC,OAAO9B,GACjDe,EAAKgB,SAA2B,QAAhBC,EAAAjB,EAAKgB,eAAW,IAAAC,EAAAA,EAAA,IAAIF,OAAOR,GAE3C,MAAMW,EAA0B,CAAC,oBAC3BC,EAAiB,IAAIC,OACzB,IAAIpB,EAAKjB,0BAA0BiB,EAAKhB,kBACxC,MAGF,IAAK,MAAMqC,KAAQnB,EAASoB,MAAMH,GAAiB,CAEjD,IADsBA,EAAeI,KAAKF,GACtB,CAClBH,EAAcM,KAAK,gBAAgBC,KAAKC,UAAUL,MAClD,QACD,CAED,IAAIM,EAAgBN,EAAKO,UACvB5B,EAAKjB,cAAc8C,OACnBR,EAAKQ,OAAS7B,EAAKhB,eAAe6C,QAKpC,MAAMC,EAAkB9B,EAAKa,WAAWkB,MAAM3C,GAC5CuC,EAAcK,WAAW5C,EAAUA,aAEjC0C,IACFH,EAAgBG,EAAgBzC,GAC9BsC,EAAcM,QAAQH,EAAgB1C,UAAW,MAIrD8B,EAAcM,KAAKG,EACpB,CAEDT,EAAcM,KAAK,oBACnB,MAAMU,EAAYhB,EAAciB,KAAK,KAGrC,OADWnC,EAAKS,MAAQD,EAAgB4B,aAEnCzB,OAAO0B,KAAKtC,MACZC,EAAKgB,QAAQsB,KAAKC,GAAWA,EAAOrD,OACvCgD,GACAM,MAAsB,QAAhBC,EAAAzC,EAAK0C,eAAW,IAAAD,EAAAA,EAAA,KAAM,IACzB9B,OAAOgC,OAAO5C,MACdC,EAAKgB,QAAQsB,KAAKC,GAAWA,EAAOlD,KACvC6C,GAEJ,OClEe,CACb5B,UACAT"}