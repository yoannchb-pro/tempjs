{"version":3,"file":"index.js","sources":["../src/config/defaultDelimiters.ts","../src/config/defaultOptions.ts","../src/core/compileFromFile.ts","../src/core/utils.ts","../src/core/compileFromFileBrowser.ts","../src/config/defaultPlugins.ts","../src/core/debug.ts","../src/core/compile.ts","../src/index.ts","../src/core/createFunction.ts"],"sourcesContent":["import Options from \"../types/options\";\r\n\r\nconst defaultDelimiters: Options[\"delimiters\"] = [\r\n  {\r\n    name: \"return\",\r\n    description: \"Allow user to add variable to the output\",\r\n    delimiter: \"=\",\r\n    fn: function (content) {\r\n      return `$__output += escapeHTML(${content})`;\r\n    },\r\n  },\r\n  {\r\n    name: \"return HTML\",\r\n    description: \"Allow user to add variable to the output with html inside\",\r\n    delimiter: \"@\",\r\n    fn: function (content) {\r\n      return `$__output += ${content}`;\r\n    },\r\n  },\r\n  {\r\n    name: \"comment\",\r\n    description: \"Shortcut to turn some code into a comment\",\r\n    delimiter: \"#\",\r\n    fn: function (content) {\r\n      return \"/*\" + content + \"*/\";\r\n    },\r\n  },\r\n  {\r\n    name: \"cancel\",\r\n    description: \"Output the instruction as text with delimiters\",\r\n    delimiter: \"%\",\r\n    fn: function (content, options) {\r\n      return `$__output += escapeHTML(\"${\r\n        options.openDelimiter\r\n      }${content.replace(/\"/gi, '\\\\\"')}${options.closeDelimiter}\")`;\r\n    },\r\n  },\r\n];\r\n\r\nexport default defaultDelimiters;\r\n","import Options from \"../types/options\";\r\n\r\nconst defaultOptions: Options = {\r\n  openDelimiter: \"{%\",\r\n  closeDelimiter: \"%}\",\r\n  minimified: true,\r\n};\r\n\r\nexport default defaultOptions;\r\n","import Options from \"../types/options\";\r\nimport compile from \"./compile\";\r\n\r\nconst isNode = typeof window === \"undefined\";\r\nconst fs = isNode && require(\"fs\");\r\nconst path = isNode && require(\"path\");\r\n\r\nlet defaultDirPath: string = \"\";\r\n\r\n/**\r\n * Compile from a file content\r\n * @param file file path\r\n * @param data data used in the file\r\n * @param opts compile options\r\n * @returns\r\n */\r\nfunction compileFromFile<O extends Options>(\r\n  file: string,\r\n  data?: Record<string, unknown>,\r\n  opts?: O\r\n) {\r\n  if (!isNode)\r\n    throw new Error(\r\n      \"Please use compileFromFileBrowser or includeBrowser instead\"\r\n    );\r\n\r\n  if (opts?.root) file = path.resolve(opts.root, file);\r\n\r\n  const template = fs.readFileSync(path.resolve(defaultDirPath, file), \"utf-8\");\r\n\r\n  if (!defaultDirPath) defaultDirPath = path.dirname(file);\r\n\r\n  return compile(template, data, opts);\r\n}\r\n\r\nexport default compileFromFile;\r\n","/**\r\n * Resolve the full path for a file from a path and a file\r\n * @param path\r\n * @param file\r\n * @returns\r\n */\r\nfunction resolvePath(path: string, file: string): string {\r\n  const splittedPath = document.location.pathname.split(\"/\");\r\n  if (splittedPath[splittedPath.length - 1]?.includes(\".\")) splittedPath.pop();\r\n  const absolutePath = splittedPath.join(\"/\");\r\n\r\n  path = path.replace(/^\\.?\\//g, \"/\").replace(/\\/$/g, \"\");\r\n  file = file.replace(/^\\.?\\//g, \"\").replace(/\\/$/g, \"\");\r\n  return `${absolutePath}${path ? \"/\" + path : \"\"}/${file}`;\r\n}\r\n\r\n/**\r\n * Resolve dirname of a path\r\n * @param path\r\n * @returns\r\n */\r\nfunction resolveDirname(path: string): string {\r\n  const separator = \"/\";\r\n  const parts = path.split(separator);\r\n  if (parts.length === 1) {\r\n    return \".\";\r\n  }\r\n  parts.pop();\r\n  if (parts.length === 1 && parts[0] === \"\") {\r\n    return separator;\r\n  }\r\n  return parts.join(separator);\r\n}\r\n\r\n/**\r\n * Polyfill of fs.readFile for browser\r\n * @param file\r\n * @param format\r\n * @param callback\r\n */\r\nasync function readFile(file: string) {\r\n  return (await fetch(file)).text();\r\n}\r\n\r\n/**\r\n * Escape HTML XSS injection from a string\r\n * @param obj The data we want to escape\r\n * @returns\r\n */\r\nfunction escapeHTML(obj: unknown) {\r\n  if (typeof obj !== \"string\") return obj;\r\n\r\n  return obj.replace(/[<>&\"']/g, (match) => {\r\n    switch (match) {\r\n      case \"<\":\r\n        return \"&lt;\";\r\n      case \">\":\r\n        return \"&gt;\";\r\n      case \"&\":\r\n        return \"&amp;\";\r\n      case \"'\":\r\n        return \"&#39;\";\r\n      case '\"':\r\n        return \"&quot;\";\r\n      default:\r\n        return match;\r\n    }\r\n  });\r\n}\r\n\r\nexport { resolvePath, resolveDirname, readFile, escapeHTML };\r\n","import Options from \"../types/options\";\r\nimport compile from \"./compile\";\r\nimport { readFile, resolveDirname, resolvePath } from \"./utils\";\r\n\r\nconst isNode = typeof window === \"undefined\";\r\n\r\nlet defaultDirPath: string = \"\";\r\n\r\n/**\r\n * Compile from a file content\r\n * @param file file path\r\n * @param data data used in the file\r\n * @param opts compile options\r\n * @returns\r\n */\r\nasync function compileFromFileBrowser<O extends Options>(\r\n  file: string,\r\n  data?: Record<string, unknown>,\r\n  opts?: O\r\n) {\r\n  if (isNode) throw new Error(\"Please use compileFromFile or include instead\");\r\n\r\n  if (opts?.root) file = resolvePath(opts.root, file);\r\n\r\n  const template = await readFile(resolvePath(defaultDirPath, file));\r\n\r\n  if (!defaultDirPath) defaultDirPath = resolveDirname(file);\r\n\r\n  const compiled = await compile(template, data, opts);\r\n\r\n  defaultDirPath = \"\";\r\n\r\n  return compiled;\r\n}\r\n\r\nexport default compileFromFileBrowser;\r\n","import compileFromFile from \"../core/compileFromFile\";\r\nimport compileFromFileBrowser from \"../core/compileFromFileBrowser\";\r\nimport { escapeHTML } from \"../core/utils\";\r\nimport Options from \"../types/options\";\r\n\r\nconst defaultPlugins: Options[\"plugins\"] = [\r\n  {\r\n    name: \"include\",\r\n    description: \"Allow to render other file into the template\",\r\n    fn: compileFromFile,\r\n  },\r\n  {\r\n    name: \"includeBrowser\",\r\n    description: \"Allow to render file into the template from the browser\",\r\n    fn: compileFromFileBrowser,\r\n  },\r\n  {\r\n    name: \"escapeHTML\",\r\n    description: \"Prevent XSS injection from a string\",\r\n    fn: escapeHTML,\r\n  },\r\n];\r\n\r\nexport default defaultPlugins;\r\n","import defaultDelimiters from \"../config/defaultDelimiters\";\r\nimport defaultOptions from \"../config/defaultOptions\";\r\nimport defaultPlugins from \"../config/defaultPlugins\";\r\nimport Options from \"../types/options\";\r\n\r\ntype DebugResult<O extends Options> = {\r\n  template: string;\r\n  options: O;\r\n  data: Record<string, unknown>;\r\n  generatedFunction: O[\"async\"] extends true\r\n    ? () => Promise<string>\r\n    : () => string;\r\n  generatedCode: string;\r\n  dataListName: string[];\r\n  dataListValue: unknown[];\r\n  pluginsName: string[];\r\n  pluginsFunctions: Function[];\r\n};\r\n\r\nconst AsyncFunction = async function () {}.constructor;\r\n\r\n//code from https://github.com/sindresorhus/escape-string-regexp\r\nfunction unescapeRegex(str: string) {\r\n  return str.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\r\n}\r\n\r\n/**\r\n * Debug a template\r\n * @param template the template\r\n * @param data data you need in the template\r\n * @param opts compiler options\r\n * @returns\r\n */\r\nfunction debug<O extends Options>(\r\n  template: string,\r\n  data?: Record<string, unknown>,\r\n  opts?: O\r\n): DebugResult<O> {\r\n  data = data ?? {};\r\n\r\n  opts = opts ?? ({} as O);\r\n  opts = Object.assign({}, defaultOptions, opts);\r\n  opts.delimiters = (opts.delimiters ?? []).concat(defaultDelimiters);\r\n  opts.plugins = (opts.plugins ?? []).concat(defaultPlugins);\r\n\r\n  const generatedCode: string[] = [\"'use strict'\", \"let $__output=''\"];\r\n  const delimiterRegex = new RegExp(\r\n    String.raw`(\\n?[\\s\\t]*${unescapeRegex(\r\n      opts.openDelimiter\r\n    )}_?[\\s\\S]*?_?${unescapeRegex(opts.closeDelimiter)}[\\s\\t]*\\n?)`,\r\n    \"gi\"\r\n  );\r\n\r\n  for (const text of template.split(delimiterRegex)) {\r\n    const isInstruction = delimiterRegex.test(text);\r\n    if (!isInstruction) {\r\n      generatedCode.push(`$__output += ${JSON.stringify(text)}`);\r\n      continue;\r\n    }\r\n\r\n    const startWhiteSpace = text.match(/^\\n?[\\s\\t]*/g)?.[0];\r\n    const endWhiteSpace = text.match(/[\\s\\t]*\\n?$/g)?.[0];\r\n    let jsInstruction = text.substring(\r\n      opts.openDelimiter.length + (startWhiteSpace.length ?? 0),\r\n      text.length - (opts.closeDelimiter.length + (endWhiteSpace.length ?? 0))\r\n    );\r\n\r\n    //check if we remove white spaces or not\r\n    const removeStartWhiteSpace = jsInstruction.startsWith(\"_\");\r\n    const removeEndWhiteSpace = jsInstruction.endsWith(\"_\");\r\n    if (removeStartWhiteSpace) {\r\n      jsInstruction = jsInstruction.substring(1);\r\n    } else {\r\n      if (!opts.removeWhitespace)\r\n        generatedCode.push(`$__output += ${JSON.stringify(startWhiteSpace)}`);\r\n    }\r\n    if (removeEndWhiteSpace) {\r\n      jsInstruction = jsInstruction.substring(0, jsInstruction.length - 1);\r\n    }\r\n\r\n    //check for custom delimiter and apply the function\r\n    const customDelimiter = opts.delimiters.find((delimiter) =>\r\n      jsInstruction.startsWith(delimiter.delimiter)\r\n    );\r\n    if (customDelimiter) {\r\n      jsInstruction = customDelimiter.fn(jsInstruction.substring(1), opts);\r\n    }\r\n    generatedCode.push(jsInstruction);\r\n\r\n    if (!removeEndWhiteSpace && !opts.removeWhitespace)\r\n      generatedCode.push(`$__output += ${JSON.stringify(endWhiteSpace)}`);\r\n  }\r\n\r\n  generatedCode.push(\"return $__output\");\r\n  const finalCode = generatedCode.join(opts.minimified ? \";\" : \";\\n\");\r\n\r\n  const fn = opts.async ? AsyncFunction : Function;\r\n\r\n  const dataListName = Object.keys(data);\r\n  const dataListValue = Object.values(data);\r\n  const pluginsName = opts.plugins.map((plugin) => plugin.name);\r\n  const pluginsFunctions = opts.plugins.map((plugin) => plugin.fn);\r\n  const generatedFunction = fn(...dataListName, ...pluginsName, finalCode).bind(\r\n    opts.context ?? null,\r\n    ...dataListValue,\r\n    ...pluginsFunctions\r\n  );\r\n  return {\r\n    template,\r\n    data,\r\n    options: opts,\r\n    generatedFunction,\r\n    generatedCode: finalCode,\r\n    dataListName,\r\n    dataListValue,\r\n    pluginsName,\r\n    pluginsFunctions,\r\n  };\r\n}\r\n\r\nexport default debug;\r\n","import Options from \"../types/options\";\r\nimport debug from \"./debug\";\r\n\r\n/**\r\n * Compile a tempjs template\r\n * @param template the template\r\n * @param data data you need in the template\r\n * @param opts compiler options\r\n * @returns\r\n */\r\nfunction compile<O extends Options>(\r\n  template: string,\r\n  data?: Record<string, unknown>,\r\n  opts?: O\r\n): O[\"async\"] extends true ? Promise<string> : string {\r\n  return debug(template, data, opts).generatedFunction() as any;\r\n}\r\n\r\nexport default compile;\r\n","import compile from \"./core/compile\";\r\nimport compileFromFile from \"./core/compileFromFile\";\r\nimport debug from \"./core/debug\";\r\nimport createFunction from \"./core/createFunction\";\r\nimport compileFromFileBrowser from \"./core/compileFromFileBrowser\";\r\n\r\nexport default {\r\n  compile,\r\n  compileFromFile,\r\n  compileFromFileBrowser,\r\n  createFunction,\r\n  debug,\r\n};\r\n","import Options from \"../types/options\";\r\nimport debug from \"./debug\";\r\n\r\n/**\r\n * Create function that compile a template\r\n * @param template the template\r\n * @param data data you need in the template\r\n * @param opts compiler options\r\n * @returns\r\n */\r\nfunction createFunction<O extends Options>(\r\n  template: string,\r\n  data?: Record<string, unknown>,\r\n  opts?: O\r\n) {\r\n  return debug(template, data, opts).generatedFunction;\r\n}\r\n\r\nexport default createFunction;\r\n"],"names":["defaultDelimiters","name","description","delimiter","fn","content","options","openDelimiter","replace","closeDelimiter","defaultOptions","minimified","isNode","window","fs","require","path","defaultDirPath","compileFromFile","file","data","opts","Error","root","resolve","template","readFileSync","dirname","compile","resolvePath","splittedPath","document","location","pathname","split","_a","length","includes","pop","join","async","compileFromFileBrowser","fetch","text","readFile","parts","resolveDirname","compiled","defaultPlugins","obj","match","AsyncFunction","constructor","unescapeRegex","str","debug","Object","assign","delimiters","concat","plugins","_b","generatedCode","delimiterRegex","RegExp","String","raw","test","push","JSON","stringify","startWhiteSpace","_c","endWhiteSpace","_d","jsInstruction","substring","_e","_f","removeStartWhiteSpace","startsWith","removeEndWhiteSpace","endsWith","removeWhitespace","customDelimiter","find","finalCode","Function","dataListName","keys","dataListValue","values","pluginsName","map","plugin","pluginsFunctions","generatedFunction","bind","_g","context","createFunction"],"mappings":"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"}